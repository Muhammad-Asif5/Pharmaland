//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZUIS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
            this.Configuration.ProxyCreationEnabled = false;
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Branch_Master> Branch_Master { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Discount_Approval> Discount_Approval { get; set; }
        public virtual DbSet<Discount_ApprovalDET> Discount_ApprovalDET { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Item_Stock> Item_Stock { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Manufacture> Manufactures { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Menu_User> Menu_User { get; set; }
        public virtual DbSet<Menu_UserReg> Menu_UserReg { get; set; }
        public virtual DbSet<PO_ItemDetail> PO_ItemDetail { get; set; }
        public virtual DbSet<Purchase_Order> Purchase_Order { get; set; }
        public virtual DbSet<Sale_InvDET> Sale_InvDET { get; set; }
        public virtual DbSet<Sale_Invoice> Sale_Invoice { get; set; }
        public virtual DbSet<Sales_order> Sales_order { get; set; }
        public virtual DbSet<Shipper> Shippers { get; set; }
        public virtual DbSet<SO_ItemDetail> SO_ItemDetail { get; set; }
        public virtual DbSet<Stock_Receipt> Stock_Receipt { get; set; }
        public virtual DbSet<Stock_ReceiptDET> Stock_ReceiptDET { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<StockTextrpt> StockTextrpts { get; set; }
        public virtual DbSet<V_InventoryWithSum> V_InventoryWithSum { get; set; }
        public virtual DbSet<V_MerckRPT> V_MerckRPT { get; set; }
        public virtual DbSet<V_PBCustomer> V_PBCustomer { get; set; }
        public virtual DbSet<V_StockInventory> V_StockInventory { get; set; }
    
        [DbFunction("Entities", "v_StockTextrpt")]
        public virtual IQueryable<v_StockTextrpt_Result> v_StockTextrpt(string vCode, Nullable<System.DateTime> receivedDate, Nullable<System.DateTime> receivedDate1)
        {
            var vCodeParameter = vCode != null ?
                new ObjectParameter("VCode", vCode) :
                new ObjectParameter("VCode", typeof(string));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("receivedDate", receivedDate) :
                new ObjectParameter("receivedDate", typeof(System.DateTime));
    
            var receivedDate1Parameter = receivedDate1.HasValue ?
                new ObjectParameter("receivedDate1", receivedDate1) :
                new ObjectParameter("receivedDate1", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<v_StockTextrpt_Result>("[Entities].[v_StockTextrpt](@VCode, @receivedDate, @receivedDate1)", vCodeParameter, receivedDateParameter, receivedDate1Parameter);
        }
    }
}
